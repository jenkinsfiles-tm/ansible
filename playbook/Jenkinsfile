#!groovy

pipeline {

  agent any

  parameters {
    string(
      name: 'CONFIG_FILE_PATH',
      defaultValue: '',
      description: 'Jenkins job configuration file path'
    )
    string(
      name: 'GIT_BRANCHES',
      defaultValue: '*/master',
      description: "Git branch or tag name or commit id of GIT_URL of Jenkins job configuration file"
    )
    string(
      name: 'GIT_URL',
      defaultValue: '',
      description: "GitHub URL of Jenkins job configuration file"
    )
    string(
      name: 'WORKING_DIR',
      defaultValue: 'ansible-playbook',
      description: 'Job working directory'
    )
  }

  stages {
    stage('Retrieve Config file') {
      steps {
        checkout(
          [
            $class: 'GitSCM',
            branches: [
              [
                name: "${params.GIT_BRANCHES}"
              ]
            ],
            extensions: [
              [
                $class: 'RelativeTargetDirectory',
                relativeTargetDir: "${params.WORKING_DIR}"
              ]
            ],
            doGenerateSubmoduleConfigurations: false,
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                url: "${params.GIT_URL}"
              ]
            ]
          ]
        )
      }
    }

    stage('Retrieve Ansible playbook') {
      steps {
        dir ("${params.WORKING_DIR}") {
          script {
            def git_branches_playbook = sh (
                                            returnStdout: true,
                                            script: "cat ${params.CONFIG_FILE_PATH} \
                                                    | grep git_branches_playbook: \
                                                    | sed -e 's/git_branches_playbook://g'"
                                           ).trim()

            def git_url_playbook      = sh (
                                            returnStdout: true,
                                            script: "cat ${params.CONFIG_FILE_PATH} \
                                                    | grep git_url_playbook: \
                                                    | sed -e 's/git_url_playbook://g'"
                                           ).trim()

            checkout(
              [
                $class: 'GitSCM',
                branches: [
                  [
                    name: "$git_branches_playbook"
                  ]
                ],
                extensions: [
                  [
                    $class: 'RelativeTargetDirectory',
                    relativeTargetDir: "ansible-playbooks"
                  ]
                ],
                doGenerateSubmoduleConfigurations: false,
                submoduleCfg: [],
                userRemoteConfigs: [
                  [
                    url: "$git_url_playbook"
                  ]
                ]
              ]
            )
          }
        }
      }
    }

    stage('Retrieve ansible.cfg') {
      steps {
        dir ("${params.WORKING_DIR}") {
          script {
            def git_branches_ansible_config = sh (
                                                  returnStdout: true,
                                                  script: "cat ${params.CONFIG_FILE_PATH} \
                                                          | grep git_branches_ansible_config: \
                                                          | sed -e 's/git_branches_ansible_config://g'"
                                                 ).trim()

            def git_url_ansible_config      = sh (
                                                  returnStdout: true,
                                                  script: "cat ${params.CONFIG_FILE_PATH} \
                                                          | grep git_url_ansible_config: \
                                                          | sed -e 's/git_url_ansible_config://g'"
                                                 ).trim()

            // Check if Git URL of Ansible Playbook file is set
            if ( git_url_ansible_config.size() == 0 ) {
              println "No Ansible Config file is set"
            } else {
              checkout(
                [
                  $class: 'GitSCM',
                  branches: [
                    [
                      name: "$git_branches_ansible_config"
                    ]
                  ],
                  extensions: [
                    [
                      $class: 'RelativeTargetDirectory',
                      relativeTargetDir: "ansiblecfg"
                    ]
                  ],
                  doGenerateSubmoduleConfigurations: false,
                  submoduleCfg: [],
                  userRemoteConfigs: [
                    [
                      url: "$git_url_ansible_config"
                    ]
                  ]
                ]
              )
              sh "mv ansiblecfg/ansible.cfg ansible-playbooks/"
            }
          }
        }
      }
    }

    stage('Install galaxy roles') {
      steps {
        dir ("${params.WORKING_DIR}/ansible-playbooks") {
          script {
            def file_exists = fileExists('roles/requirements.yml')

            if (file_exists) {
              sh "ansible-galaxy install -r roles/requirements.yml -p roles/"
            } else {
              sh "echo 'No Ansible Galaxy roles to be installed found'"
            }
          }
        }
      }
    }

    stage('Set SSH Private Key') {
      steps {
        dir ("${params.WORKING_DIR}") {
          script {
            def ssh_private_key = sh (
                                      returnStdout: true,
                                      script: "cat ${params.CONFIG_FILE_PATH} \
                                              | grep ssh_private_key: \
                                              | sed -e 's/ssh_private_key://g'"
                                     ).trim()

            if ( ssh_private_key.length() != 0 ) {
              withCredentials(
                bindings:
                  [
                    sshUserPrivateKey
                      (
                         credentialsId: "$ssh_private_key", \
                         keyFileVariable: 'PRIVATE_KEY'
                      )
                  ]
              )
              {
                sh "cat $PRIVATE_KEY > ansible-playbooks/.private_key.pem"
                sh "chmod 600 ansible-playbooks/.private_key.pem"
              }
            } else {
              sh "echo 'No private key id provided'"
            }
          }
        }
      }
    }

    stage('Execute ansible-playbook') {
      steps {
        dir ("${params.WORKING_DIR}") {
          script {
            def ansible_playbook     = sh (
                                           returnStdout: true,
                                           script: "cat ${params.CONFIG_FILE_PATH} \
                                                   | grep ansible_playbook: \
                                                   | sed -e 's/ansible_playbook://g'"
                                          ).trim()

            def extra_args           = sh (
                                           returnStdout: true,
                                           script: "cat ${params.CONFIG_FILE_PATH} \
                                                   | grep extra_args: \
                                                   | sed -e 's/extra_args://g'"
                                          ).trim()

            def inventory_parameters = sh (
                                           returnStdout: true,
                                           script: "cat ${params.CONFIG_FILE_PATH} \
                                                   | grep inventory_parameters: \
                                                   | sed -e 's/inventory_parameters://g'"
                                          ).trim()

            def ssh_private_key      = sh (
                                           returnStdout: true,
                                           script: "cat ${params.CONFIG_FILE_PATH} \
                                                   | grep ssh_private_key: \
                                                   | sed -e 's/ssh_private_key://g'"
                                          ).trim()

            if ( ssh_private_key.length() != 0 ) {
              sh "cd ansible-playbooks; \
                  ansible-playbook $ansible_playbook \
                  $inventory_parameters \
                  --key-file '.private_key.pem' \
                  $extra_args \
                  | tee ansible.log"
            } else {
              sh "cd ansible-playbooks; \
                  ansible-playbook $ansible_playbook \
                  $inventory_parameters \
                  $extra_args \
                  | tee ansible.log"
            }
          }
        }
      }
    }

    stage('Analyze results') {
      steps {
        dir ("${params.WORKING_DIR}/ansible-playbooks") {
          script {
            def output = sh(
                            returnStdout: true,
                            script: "tail -n 2 ansible.log"
                         )

            if (output.contains("unreachable=0") && output.contains("failed=0")) {
              sh "echo success"
            } else {
              error "ansible-playbook error\n$output"
            }
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
